/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
package lexAnalyzer;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.Vector;

public class SyntaxChecker implements SyntaxCheckerConstants {
  public static void main(String[] args) throws Exception{
    //Trie table object to be passed
    Trie keysNIds = new Trie();
    try {
      //inputing all keywords that are placed in the file keywords.txt into Trie table
      File keywordsFile = new File("keywords.txt");
      Scanner keyScan = new Scanner(keywordsFile);
      while(keyScan.hasNext()) {
        keysNIds.add(keyScan.nextLine());
      }
    } catch(Exception e) {
      System.out.println(e.getMessage());
    }
    try {
      //getting sample Toy program to pass into SyntaxChecker
      File toyProgram = new File("input.cpp");
      Scanner programRead = new Scanner(toyProgram);
      StringBuilder fileString = new StringBuilder();
      while(programRead.hasNext()) {
        String str = programRead.nextLine();
        fileString.append(str + "\u005cn");
      }
      FileWriter fw = new FileWriter("tokenOutput.txt", true);
      PrintWriter out = new PrintWriter("tokenOutput.txt","UTF-8");

      new SyntaxChecker(new java.io.StringReader(fileString.toString())).S(keysNIds, out);
      out.close();
      System.out.println("done");
    } catch(Exception e) {
      System.out.println(e.getMessage());
    }
    keysNIds.print();
  }

  static final public void S(Trie s, PrintWriter out) throws ParseException {
                                  Token n; System.out.print(' ');
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      jj_consume_token(COMMENT);

      S(s, out);
      break;
    case DOUBLECONST:
      jj_consume_token(DOUBLECONST);
                   System.out.print("_doubleconstant "); out.print(Tokens._doubleconstant.getValue() + " ");
      S(s, out);
      break;
    case INTCONST:
    case NUM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTCONST:
        jj_consume_token(INTCONST);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          System.out.print("_intconstant "); out.print(Tokens._intconstant.getValue() + " ");
      S(s, out);
      break;
    case STRINGCONST:
      jj_consume_token(STRINGCONST);
                   System.out.print("_stringconstant "); out.print(Tokens._stringconstant.getValue() + " ");
      S(s, out);
      break;
    case ELSE:
      jj_consume_token(ELSE);
            System.out.print("_else "); out.print(Tokens._else.getValue() + " ");
      S(s,out);
      break;
    case FOR:
      jj_consume_token(FOR);
           System.out.print("_for "); out.print(Tokens._for.getValue() + " ");
      S(s,out);
      break;
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
                  System.out.print("_implements "); out.print(Tokens._implements.getValue() + " ");
      S(s,out);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                 System.out.print("_interface "); out.print(Tokens._interface.getValue() + " ");
      S(s,out);
      break;
    case NEW:
      jj_consume_token(NEW);
           System.out.print("_new "); out.print(Tokens._new.getValue() + " ");
      S(s,out);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
               System.out.print("_println "); out.print(Tokens._println.getValue() + " ");
      S(s,out);
      break;
    case READLN:
      jj_consume_token(READLN);
              System.out.print("_readln "); out.print(Tokens._readln.getValue() + " ");
      S(s,out);
      break;
    case RETURN:
      jj_consume_token(RETURN);
              System.out.print("_return "); out.print(Tokens._return.getValue() + " ");
      S(s,out);
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
               System.out.print("_extends "); out.print(Tokens._extends.getValue() + " ");
      S(s,out);
      break;
    case STRING:
      jj_consume_token(STRING);
              System.out.print("_string "); out.print(Tokens._string.getValue() + " ");
      S(s,out);
      break;
    case VOID:
      jj_consume_token(VOID);
            System.out.print("_void "); out.print(Tokens._void.getValue() + " ");
      S(s,out);
      break;
    case WHILE:
      jj_consume_token(WHILE);
             System.out.print("_while "); out.print(Tokens._while.getValue() + " ");
      S(s,out);
      break;
    case BOOLEANCONST:
      jj_consume_token(BOOLEANCONST);
                    System.out.print("_booleanconstant "); out.print(Tokens._booleanconstant.getValue() + " ");
      S(s, out);
      break;
    case PLUS:
      jj_consume_token(PLUS);
            System.out.print("_plus "); out.print(Tokens._plus.getValue() + " ");
      S(s, out);
      break;
    case MINUS:
      jj_consume_token(MINUS);
             System.out.print("_minus "); out.print(Tokens._minus.getValue() + " ");
      S(s, out);
      break;
    case MULT:
      jj_consume_token(MULT);
            System.out.print("_multiplication "); out.print(Tokens._multiplication.getValue() + " ");
      S(s,out);
      break;
    case DIV:
      jj_consume_token(DIV);
           System.out.print("_division "); out.print(Tokens._division.getValue() + " ");
      S(s, out);
      break;
    case MOD:
      jj_consume_token(MOD);
           System.out.print("_mod "); out.print(Tokens._mod.getValue() + " ");
      S(s, out);
      break;
    case LESS:
      jj_consume_token(LESS);
            System.out.print("_less "); out.print(Tokens._less.getValue() + " ");
      S(s,out);
      break;
    case LESSEQ:
      jj_consume_token(LESSEQ);
              System.out.print("_lessequal "); out.print(Tokens._lessequal.getValue() + " ");
      S(s,out);
      break;
    case GREAT:
      jj_consume_token(GREAT);
             System.out.print("_greater "); out.print(Tokens._greater.getValue() + " ");
      S(s,out);
      break;
    case GREATEQ:
      jj_consume_token(GREATEQ);
               System.out.print("_greaterequal "); out.print(Tokens._greaterequal.getValue() + " ");
      S(s,out);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
             System.out.print("_equal "); out.print(Tokens._equal.getValue() + " ");
      S(s,out);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
                System.out.print("_notequal "); out.print(Tokens._notequal.getValue() + " ");
      S(s,out);
      break;
    case AND:
      jj_consume_token(AND);
           System.out.print("_and "); out.print(Tokens._and.getValue() + " ");
      S(s,out);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
               System.out.print("_boolean "); out.print(Tokens._boolean.getValue() + " ");
      S(s,out);
      break;
    case OR:
      jj_consume_token(OR);
          System.out.print("_or "); out.print(Tokens._or.getValue() + " ");
      S(s,out);
      break;
    case NOT:
      jj_consume_token(NOT);
           System.out.print("_not "); out.print(Tokens._not.getValue() + " ");
      S(s,out);
      break;
    case ASSIGNOP:
      jj_consume_token(ASSIGNOP);
                System.out.print("_assignop "); out.print(Tokens._assignop.getValue() + " ");
      S(s,out);
      break;
    case SEMI:
      jj_consume_token(SEMI);
            System.out.print("_semicolon "); out.print(Tokens._semicolon.getValue() + " ");
      S(s,out);
      break;
    case COMMA:
      jj_consume_token(COMMA);
             System.out.print("_comma "); out.print(Tokens._comma.getValue() + " ");
      S(s,out);
      break;
    case PERIOD:
      jj_consume_token(PERIOD);
              System.out.print("_period "); out.print(Tokens._period.getValue() + " ");
      S(s,out);
      break;
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
                 System.out.print("_leftparen "); out.print(Tokens._leftparen.getValue() + " ");
      S(s,out);
      break;
    case RIGHTPAREN:
      jj_consume_token(RIGHTPAREN);
                  System.out.print("_rightparen "); out.print(Tokens._rightparen.getValue() + " ");
      S(s,out);
      break;
    case LEFTBRACK:
      jj_consume_token(LEFTBRACK);
                 System.out.print("_leftbracket "); out.print(Tokens._leftbracket.getValue() + " ");
      S(s,out);
      break;
    case RIGHTBRACK:
      jj_consume_token(RIGHTBRACK);
                  System.out.print("_rightbracket "); out.print(Tokens._rightbracket.getValue() + " ");
      S(s,out);
      break;
    case LEFTBRACE:
      jj_consume_token(LEFTBRACE);
                 System.out.print("_leftbrace "); out.print(Tokens._leftbrace.getValue() + " ");
      S(s,out);
      break;
    case RIGHTBRACE:
      jj_consume_token(RIGHTBRACE);
                  System.out.print("_rightbrace "); out.print(Tokens._rightbrace.getValue() + " ");
      S(s,out);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
              System.out.print("_double "); out.print(Tokens._double.getValue() + " ");
      S(s,out);
      break;
    case BREAK:
      jj_consume_token(BREAK);
             System.out.print("_break "); out.print(Tokens._break.getValue() + " ");
      S(s,out);
      break;
    case NEWARRAY:
      jj_consume_token(NEWARRAY);
                System.out.print("_newarray "); out.print(Tokens._newarray.getValue() + " ");
      S(s,out);
      break;
    case NWLINE:
      jj_consume_token(NWLINE);
              System.out.print("\u005cn"); out.println();
      S(s,out);
      break;
    case CLASS:
      jj_consume_token(CLASS);
             System.out.print("_class "); out.print(Tokens._class.getValue() + " ");
      S(s,out);
      break;
    case IF:
      jj_consume_token(IF);
          System.out.print("_if "); out.print(Tokens._if.getValue() + " ");
      S(s,out);
      break;
    case INT:
      jj_consume_token(INT);
           System.out.print("_int "); out.print(Tokens._int.getValue() + " ");
      S(s,out);
      break;
    case IDENTIFIER:
      n = jj_consume_token(IDENTIFIER);
                      System.out.print("_id "); out.print(Tokens._id.getValue() + " ");s.add(n.image);
      S(s,out);
      break;
    case 0:
      jj_consume_token(0);
           System.out.print("\u005cn"); out.println();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxCheckerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xfffffff9,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x420000,0xefffbf,};
   }

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
