/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerConstants.java */
package lexAnalyzer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxCheckerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 3;
  /** RegularExpression Id. */
  int BREAK = 4;
  /** RegularExpression Id. */
  int MINUS = 5;
  /** RegularExpression Id. */
  int CLASS = 6;
  /** RegularExpression Id. */
  int ELSE = 7;
  /** RegularExpression Id. */
  int MULT = 8;
  /** RegularExpression Id. */
  int DIV = 9;
  /** RegularExpression Id. */
  int MOD = 10;
  /** RegularExpression Id. */
  int EXTENDS = 11;
  /** RegularExpression Id. */
  int LESS = 12;
  /** RegularExpression Id. */
  int LESSEQ = 13;
  /** RegularExpression Id. */
  int GREAT = 14;
  /** RegularExpression Id. */
  int NWLINE = 15;
  /** RegularExpression Id. */
  int FOR = 16;
  /** RegularExpression Id. */
  int GREATEQ = 17;
  /** RegularExpression Id. */
  int EQUAL = 18;
  /** RegularExpression Id. */
  int NOTEQUAL = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int NOT = 23;
  /** RegularExpression Id. */
  int ASSIGNOP = 24;
  /** RegularExpression Id. */
  int IMPLEMENTS = 25;
  /** RegularExpression Id. */
  int SEMI = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int INTERFACE = 28;
  /** RegularExpression Id. */
  int PERIOD = 29;
  /** RegularExpression Id. */
  int LEFTPAREN = 30;
  /** RegularExpression Id. */
  int NEW = 31;
  /** RegularExpression Id. */
  int RIGHTPAREN = 32;
  /** RegularExpression Id. */
  int LEFTBRACK = 33;
  /** RegularExpression Id. */
  int RIGHTBRACK = 34;
  /** RegularExpression Id. */
  int NEWARRAY = 35;
  /** RegularExpression Id. */
  int LEFTBRACE = 36;
  /** RegularExpression Id. */
  int RIGHTBRACE = 37;
  /** RegularExpression Id. */
  int NULL = 38;
  /** RegularExpression Id. */
  int PRINTLN = 39;
  /** RegularExpression Id. */
  int DOUBLE = 40;
  /** RegularExpression Id. */
  int READLN = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int VOID = 43;
  /** RegularExpression Id. */
  int WHILE = 44;
  /** RegularExpression Id. */
  int BOOLEAN = 45;
  /** RegularExpression Id. */
  int BOOLEANCONST = 46;
  /** RegularExpression Id. */
  int INT = 47;
  /** RegularExpression Id. */
  int INTCONST = 48;
  /** RegularExpression Id. */
  int COMMENT = 49;
  /** RegularExpression Id. */
  int IDENTIFIER = 50;
  /** RegularExpression Id. */
  int LETTER = 51;
  /** RegularExpression Id. */
  int DOUBLECONST = 52;
  /** RegularExpression Id. */
  int NUM = 53;
  /** RegularExpression Id. */
  int STRING = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"+\"",
    "\"break\"",
    "\"-\"",
    "\"class\"",
    "\"else\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"extends\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "<NWLINE>",
    "\"for\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"if\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"=\"",
    "\"implements\"",
    "\";\"",
    "\",\"",
    "\"interface\"",
    "\".\"",
    "\"(\"",
    "\"new\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"newarray\"",
    "\"{\"",
    "\"}\"",
    "\"null\"",
    "\"println\"",
    "\"double\"",
    "\"readln\"",
    "\"return\"",
    "\"void\"",
    "\"while\"",
    "\"boolean\"",
    "<BOOLEANCONST>",
    "\"int\"",
    "<INTCONST>",
    "<COMMENT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DOUBLECONST>",
    "<NUM>",
    "<STRING>",
  };

}
